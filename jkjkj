#include <iostream>

#include <cstdlib>

using namespace std;

class PetRecord

{

private:

       string name;

        int age;//in years

       double weight;//in pounds

   public:

       void print();

   PetRecord(string initialName, int initialAge, double initialWeight);

   void set(string newName, int newAge, double newWeight);

   PetRecord(string initialName);

   void setName(string newName);

   PetRecord(int initialAge);

   void setAge(int newAge);

   PetRecord(double initialWeight);

   void setWeight(double newWeight);

   PetRecord();

   string getName();

   int getAge();

   double getWeight();

};

void PetRecord::print( )

{

cout << "Name: " << name + " Age: " << age << " years"

<< "\nWeight: " << weight << " pounds";

}

PetRecord::PetRecord(string initialName, int initialAge,

double initialWeight)

{

name = initialName;

if ((initialAge < 0) || (initialWeight < 0))

{

cout << "Error: Negative age or weight.";

exit(1);

}

else

{

age = initialAge;

weight = initialWeight;

}

}

void PetRecord::set(string newName, int newAge, double newWeight)

{

name = newName;

if ((newAge < 0) || (newWeight < 0))

{

cout << "Error: Negative age or weight." << endl;

exit(1);

}

else

{

age = newAge;

weight = newWeight;

}

}

PetRecord::PetRecord(string initialName)

{

name = initialName;

age = 0;

weight = 0;

}

void PetRecord::setName(string newName)

{

name = newName;

}

PetRecord::PetRecord(int initialAge)

{

name = "No name yet.";

weight = 0;

if (initialAge < 0)

{

cout << "Error: Negative age." << endl;

exit(1);

}

else

age = initialAge;

}

void PetRecord::setAge(int newAge)

{

if (newAge < 0)

{

cout << "Error: Negative age." << endl;

exit(1);

}

else

age = newAge;

}

PetRecord::PetRecord(double initialWeight)

{

name = "No name yet";

age = 0;

if (initialWeight < 0)

{

cout << "Error: Negative weight." <<endl;

exit(1);

}

else

weight = initialWeight;

}

void PetRecord::setWeight(double newWeight)

{

if (newWeight < 0)

{

cout << "Error: Negative weight." << endl;

exit(1);

}

else

weight = newWeight;

}

PetRecord::PetRecord( )

{

name = "No name yet.";

age = 0;

weight = 0;

}

string PetRecord::getName( )

{

return name;

}

int PetRecord::getAge( )

{

return age;

}

double PetRecord::getWeight( )

{

return weight;

}

class DogRecord:public PetRecord

{

   private:

   bool hasLongHair;

   public:

       DogRecord(bool setHasLongHair,string initialName, int initialAge, double initialWeight);

       void setLongHair(bool setHasLongHair);

       bool getLongHair();

};

DogRecord::DogRecord(bool setHasLongHair, string initialName, int initialAge, double initialWeight) : PetRecord(initialName,initialAge,initialWeight),

                              hasLongHair(setHasLongHair)

{}

void DogRecord::setLongHair(bool setHasLongHair)

{

               hasLongHair = setHasLongHair;

}

bool DogRecord::getLongHair()

{

               return hasLongHair;

}

class CatRecord: public PetRecord

{

private:

   bool hasLongHair;

   public:

                  CatRecord(bool setHasLongHair,string initialName, int initialAge, double initialWeight);

       void setLongHair(bool setHasLongHair);

       bool getLongHair();

};

CatRecord::CatRecord(bool setHasLongHair, string initialName, int initialAge, double initialWeight) : PetRecord(initialName,initialAge,initialWeight),

                              hasLongHair(setHasLongHair)

{}

void CatRecord::setLongHair(bool setHasLongHair)

{

               hasLongHair = setHasLongHair;

}

bool CatRecord::getLongHair()

{

               return hasLongHair;

}

class BirdRecord : public PetRecord

{

private:

               int numFeathers ;

public:

               BirdRecord(int initialNumFeathers,string initialName, int initialAge, double initialWeight);

               void setNumFeathers(int initialNumFeathers);

               int getNumFeathers();

};

BirdRecord::BirdRecord(int initialNumFeathers,string initialName, int initialAge, double initialWeight)

               :PetRecord(initialName,initialAge,initialWeight), numFeathers(initialNumFeathers)

{}

void BirdRecord::setNumFeathers(int initialNumFeathers)

{

               numFeathers = initialNumFeathers;

}

int BirdRecord::getNumFeathers()

{

               return numFeathers;

}

int main() {

               CatRecord cat(true,"Lucy",3,70);

               DogRecord dog(false,"Hardy",5,120.75);

               BirdRecord bird(75,"Poppy",3,50);

               if(cat.getLongHair())

                              cout<<"\nCat Record => Name : "<<cat.getName()<<" Age : "<<cat.getAge()<<" Weight : "<<cat.getWeight()<<" has long hair";

               else

                              cout<<"\nCat Record => Name : "<<cat.getName()<<" Age : "<<cat.getAge()<<" Weight : "<<cat.getWeight()<<" doesn't have long hair";

               if(dog.getLongHair())

                              cout<<"\nDog Record => Name : "<<dog.getName()<<" Age : "<<dog.getAge()<<" Weight : "<<dog.getWeight()<<" has long hair";

               else

                              cout<<"\nDog Record => Name : "<<dog.getName()<<" Age : "<<dog.getAge()<<" Weight : "<<dog.getWeight()<<" doesn't have long hair";

               cout<<"\nBird Record => Name : "<<bird.getName()<<" Age : "<<bird.getAge()<<" Weight : "<<bird.getWeight()<<" Number of feathers : "<<bird.getNumFeathers()<<endl;

               return 0;

}
